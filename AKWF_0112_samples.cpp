#include "AKWF_0112_samples.h"

static const uint32_t sample_0_AKWF_0112_AKWF_0112[384] = {
0x188a0bf4,0x2e4b23f0,0x400b37a7,0x4e484792,0x59925443,0x62725e49,0x695e6622,0x6ebd6c3b,
0x72e070f2,0x760f7490,0x78797759,0x7a537978,0x7bb97b13,0x7cc87c4e,0x7d967d3a,0x7e327dea,
0x7ea57e6f,0x7efd7ed5,0x7f3e7f1e,0x7f6e7f59,0x7f927f82,0x7fae7fa2,0x7fc27fb8,0x7fcf7fcb,
0x7fda7fd9,0x7fe37fe2,0x7feb7fe8,0x7fee7fed,0x7ff37ff2,0x7ff57ff3,0x7ff57ff7,0x7ff77ff8,
0x7ff87ff9,0x7ff97ffb,0x7ff97ffb,0x7ff97ffc,0x7ffb7ffc,0x7ffb7ffc,0x7ffc7ffc,0x7ffd7ffb,
0x7ffc7ffb,0x7ffc7ffc,0x7ff97ffd,0x7ffb7ffe,0x7ffb7ffd,0x7ffc7ffd,0x7ffd7ffc,0x7ffc7ffc,
0x7ffd7ffc,0x7ffd7ffb,0x7ffc7ffc,0x7ffd7ffc,0x7ffe7ffb,0x7ffd7ff9,0x7ffb7ffd,0x7ffc7ffd,
0x7ffe7ffb,0x7ffc7ffb,0x7ffc7ffd,0x7ffc7ffc,0x7ffd7ffc,0x7ffb7ffc,0x7ffb7ffe,0x7ffd7ffc,
0x7ffc7ffc,0x7ffc7ffc,0x7ffd7ffc,0x7ffc7ffb,0x7ff97ffe,0x7ffd7ffd,0x7ffd7ffb,0x7ffe7ffb,
0x7ffe7ff9,0x7ffc7ffb,0x7ffb7ffd,0x7ffb7ffd,0x7ff97ffe,0x7ffd7ffd,0x7ffd7ffb,0x7ffe7ffb,
0x7ffe7ff9,0x7ffd7ffb,0x7ffd7ffb,0x7ffc7ffc,0x7ffb7ffd,0x7ffb7ffd,0x7ffc7ffd,0x7ffc7ffc,
0x7ffd7ffc,0x7ffb7ffc,0x7ffb7ffe,0x7ffd7ffc,0x7ffd7ffb,0x7ffd7ffb,0x7ffc7ffc,0x7ffd7ffc,
0x7ffd7ffb,0x7ffc7ffc,0x7ffc7ffc,0x7ffc7ffc,0x7ffb7ffd,0x7ffd7ffc,0x7ffb7ffc,0x7ff97ffe,
0x7ffc7ffe,0x7ffb7ffc,0x7ffb7ffe,0x7ffd7ffc,0x7ffc7ffc,0x7ffc7ffc,0x7ffc7ffd,0x7ffc7ffc,
0x7ffc7ffc,0x7ffd7ffc,0x7ffd7ffb,0x7ffc7ffc,0x7ffb7ffd,0x7ff97ffe,0x7ffb7ffe,0x7ffc7ffd,
0x7ffe7ffb,0x7ffc7ffb,0x7ffc7ffd,0x7ffc7ffc,0x7ffb7ffd,0x7ffc7ffd,0x7ffc7ffc,0x7ffd7ffc,
0x7ffc7ffb,0x7ffb7ffd,0x7ffc7ffd,0x7ffc7ffc,0x7ffc7ffd,0x7ffc7ffc,0x7ffc7ffd,0x7ffc7ffc,
0x7ffb7ffd,0x7ffb7ffe,0x7ffc7ffd,0x7ffd7ffc,0x7ffc7ffc,0x7ffd7ffc,0x7ffb7ffc,0x7ffb7ffe,
0x7ffd7ffc,0x77c27e82,0x5d9b6b2f,0x41b550b3,0x1ff530a7,0x01c6106b,0xe779f409,0xd1b7dc0d,
0xbff4c859,0xb1b8b86e,0xa66dabbf,0x9d8da1b8,0x96a099e0,0x914293c7,0x8d208f0f,0x89f18b6e,
0x878488a9,0x85ac868a,0x844484ee,0x833683b4,0x826782ca,0x81cf8217,0x815b8190,0x8102812c,
0x80c280e2,0x809280a7,0x806e807e,0x8052805e,0x803e8048,0x80308035,0x80238029,0x801c8020,
0x80178017,0x80118013,0x800c8011,0x800c800d,0x800b8008,0x80078009,0x80078009,0x80078007,
0x80078005,0x80048005,0x80038007,0x80058005,0x80078003,0x80058003,0x80058003,0x80058003,
0x80038004,0x80028007,0x80048004,0x80028005,0x80038005,0x80038005,0x80048004,0x80048004,
0x80058003,0x80048003,0x80048004,0x80058003,0x80058002,0x80038004,0x80048004,0x80048004,
0x80058003,0x80048003,0x80058003,0x80048003,0x80058003,0x80058002,0x80038004,0x80048004,
0x80038004,0x80038005,0x80048004,0x80058003,0x80038003,0x80018007,0x80038007,0x80078003,
0x80078001,0x80038003,0x80038005,0x80038005,0x80048004,0x80038004,0x80048004,0x80038004,
0x80038005,0x80048004,0x80048004,0x80038004,0x80038005,0x80028005,0x80048005,0x80048003,
0x80048004,0x80038004,0x80038005,0x80048004,0x80058003,0x80048003,0x80038004,0x80038005,
0x80048004,0x80058003,0x80048003,0x80048004,0x80048004,0x80058003,0x80038004,0x80048004,
0x80038004,0x80028005,0x80028007,0x80038005,0x80038005,0x80048004,0x80048004,0x80058003,
0x80058003,0x80048003,0x80038004,0x80038005,0x80048004,0x80038004,0x80048004,0x80048004,
0x80058003,0x80038004,0x80038005,0x80028005,0x80028007,0x80048005,0x80058003,0x80058003,
0x80058002,0x80048004,0x80048003,0x80048004,0x80048003,0x80038004,0x80038005,0x80048004,
0x80048004,0x80048004,0x80048003,0x80048004,0x80048003,0x80048004,0x80048003,0x883c817e,
0xa26494d3,0xbe4baf4d,0xe00bcf59,0xfe3bef94,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,
};

static const AudioSynthWavetable::sample_data AKWF_0112_samples[1] = {
	{
		(int16_t*)sample_0_AKWF_0112_AKWF_0112, // sample
		true, // LOOP
		10, // LENGTH_BITS
		(1 << (32 - 10)) * WAVETABLE_CENTS_SHIFT(0) * 44100.0 / WAVETABLE_NOTE_TO_FREQUENCY(60) / AUDIO_SAMPLE_RATE_EXACT + 0.5, // PER_HERTZ_PHASE_INCREMENT
		((uint32_t)601 - 1) << (32 - 10), // MAX_PHASE
		((uint32_t)600 - 1) << (32 - 10), // LOOP_PHASE_END
		(((uint32_t)600 - 1) << (32 - 10)), // LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * WAVETABLE_DECIBEL_SHIFT(0)), // INITIAL_ATTENUATION_SCALAR
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DELAY_COUNT
		uint32_t(1.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // ATTACK_COUNT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // HOLD_COUNT
		uint32_t(1.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DECAY_COUNT
		uint32_t(2399.11 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // RELEASE_COUNT
		int32_t((1.0 - WAVETABLE_DECIBEL_SHIFT(0.0)) * AudioSynthWavetable::UNITY_GAIN), // SUSTAIN_MULT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // VIBRATO_DELAY
		uint32_t(8.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // VIBRATO_INCREMENT
		(WAVETABLE_CENTS_SHIFT(0) - 1.0) * 4, // VIBRATO_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(0)) * 4, // VIBRATO_COEFFICIENT_SECONDARY
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // MODULATION_DELAY
		uint32_t(8.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // MODULATION_INCREMENT
		(WAVETABLE_CENTS_SHIFT(0) - 1.0) * 4, // MODULATION_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(0)) * 4, // MODULATION_PITCH_COEFFICIENT_SECOND
		int32_t(UINT16_MAX * (WAVETABLE_DECIBEL_SHIFT(0) - 1.0)) * 4, // MODULATION_AMPLITUDE_INITIAL_GAIN
		int32_t(UINT16_MAX * (1.0 - WAVETABLE_DECIBEL_SHIFT(0))) * 4, // MODULATION_AMPLITUDE_FINAL_GAIN
	},
};

static const uint8_t AKWF_0112_ranges[] = {127, };

const AudioSynthWavetable::instrument_data AKWF_0112 = {1, AKWF_0112_ranges, AKWF_0112_samples };
