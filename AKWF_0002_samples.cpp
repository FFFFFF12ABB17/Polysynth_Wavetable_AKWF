#include "AKWF_0002_samples.h"

static const uint32_t sample_0_AKWF_0002_AKWF_0002[128] = {
0x0ca2001c,0x2aba1b7d,0x4703396b,0x5d8f5324,0x6d526648,0x76a772b7,0x7a767937,0x79507a80,
0x733876e1,0x68236e49,0x588760e1,0x45334f3e,0x2fce3a9e,0x1ad52517,0x08fd115b,0xfd59023e,
0xf2d8f7f8,0xead1ee66,0xe697e839,0xe618e5e6,0xe892e703,0xed30eaad,0xf307f004,0xf90df614,
0xfe30fbcb,0x01920003,0x048d032e,0x06410595,0x06740689,0x05470606,0x030c0442,0x007001b9,
0xfdf0ff56,0xfb0dfc78,0xf8caf9cb,0xf7ccf81b,0xf858f7de,0xfa95f942,0xfe43fc49,0x0292002c,
0x098105c3,0x12250dad,0x1b5416c0,0x23c71fb9,0x2a3f2753,0x2dc62c71,0x2dbd2e37,0x2a012c4d,
0x22f726e7,0x18f01e4a,0x0cc31304,0x00e10679,0xf4d7fb97,0xe5cded6d,0xd721de47,0xcad9d096,
0xc25ec615,0xbe81bfd3,0xbf8bbe65,0xc548c1e1,0xcf1bc9b7,0xdc6cd55d,0xec0fe412,0xfb8ff411,
0x087f0177,0x18801065,0x27c62065,0x34142e69,0x3c2838b3,0x3f643e61,0x3dc33f2d,0x37ca3b45,
0x2e46336b,0x2204286f,0x143b1b37,0x06cb0d51,0xfc97013c,0xf12ff6fa,0xe67aeb9b,0xde54e205,
0xd98edb79,0xd861d888,0xda8cd919,0xdf41dca2,0xe5a9e24b,0xecf4e941,0xf435f0a5,0xfa85f78a,
0xff17fd10,0x01bc0072,0x039702d3,0x04130402,0x033403cc,0x014e0258,0xff2e003b,0xfc3afdc7,
0xf921faa5,0xf6baf7cb,0xf5acf601,0xf644f5bf,0xf89af736,0xfc8ffa6a,0x0100fedd,0x078203ee,
0x0fd70b8b,0x188f143d,0x20341c9c,0x2563232d,0x26fb26ad,0x24862646,0x1de921be,0x130d18f8,
0x05400c59,0xf738feef,0xe24aed5b,0xca73d67f,0xb340be94,0x9f68a8cf,0x90509737,0x86408aa7,
0x80fd830d,0x804f8011,0x848581be,0x8e7088bb,0x9ef695d0,0xb6c2a9ed,0xd49bc523,0xf3b0e479,

};

static const AudioSynthWavetable::sample_data AKWF_0002_samples[1] = {
	{
		(int16_t*)sample_0_AKWF_0002_AKWF_0002, // sample
		true, // LOOP
		9, // LENGTH_BITS
		(1 << (32 - 9)) * WAVETABLE_CENTS_SHIFT(0) * 44100.0 / WAVETABLE_NOTE_TO_FREQUENCY(77) / AUDIO_SAMPLE_RATE_EXACT + 0.5, // PER_HERTZ_PHASE_INCREMENT
		((uint32_t)256 - 1) << (32 - 9), // MAX_PHASE
		((uint32_t)255 - 1) << (32 - 9), // LOOP_PHASE_END
		(((uint32_t)255 - 1) << (32 - 9)), // LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * WAVETABLE_DECIBEL_SHIFT(-15.0)), // INITIAL_ATTENUATION_SCALAR
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DELAY_COUNT
		uint32_t(1.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // ATTACK_COUNT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // HOLD_COUNT
		uint32_t(1.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DECAY_COUNT
		uint32_t(1.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // RELEASE_COUNT
		int32_t((1.0 - WAVETABLE_DECIBEL_SHIFT(0.0)) * AudioSynthWavetable::UNITY_GAIN), // SUSTAIN_MULT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // VIBRATO_DELAY
		uint32_t(8.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // VIBRATO_INCREMENT
		(WAVETABLE_CENTS_SHIFT(0) - 1.0) * 4, // VIBRATO_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(0)) * 4, // VIBRATO_COEFFICIENT_SECONDARY
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // MODULATION_DELAY
		uint32_t(8.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // MODULATION_INCREMENT
		(WAVETABLE_CENTS_SHIFT(0) - 1.0) * 4, // MODULATION_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(0)) * 4, // MODULATION_PITCH_COEFFICIENT_SECOND
		int32_t(UINT16_MAX * (WAVETABLE_DECIBEL_SHIFT(0) - 1.0)) * 4, // MODULATION_AMPLITUDE_INITIAL_GAIN
		int32_t(UINT16_MAX * (1.0 - WAVETABLE_DECIBEL_SHIFT(0))) * 4, // MODULATION_AMPLITUDE_FINAL_GAIN
	},
};

static const uint8_t AKWF_0002_ranges[] = {127, };

const AudioSynthWavetable::instrument_data AKWF_0002 = {1, AKWF_0002_ranges, AKWF_0002_samples };
