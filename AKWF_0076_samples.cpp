#include "AKWF_0076_samples.h"

static const uint32_t sample_0_AKWF_0076_AKWF_0076[384] = {
0x00000000,0x00000000,0x00000000,0x00000000,0x08880888,0x08880888,0x08880888,0x10460888,
0x11111111,0x11111111,0x11111111,0x19991111,0x19991999,0x19991999,0x19991999,0x22221999,
0x22222222,0x22222222,0x22222222,0x2aaa2aaa,0x2aaa2aaa,0x2aaa2aaa,0x2aaa2aaa,0x32682aaa,
0x33333333,0x33333333,0x33333333,0x3bbb3333,0x3bbb3bbb,0x3bbb3bbb,0x3bbb3bbb,0x3bbb3bbb,
0x44444444,0x44444444,0x44444444,0x44444444,0x44444444,0x4ccc4ccc,0x4ccc4ccc,0x4ccc4ccc,
0x4ccc4ccc,0x4ccc4ccc,0x55554ccc,0x55555555,0x55555555,0x55555555,0x55555555,0x55555555,
0x55555555,0x5ddd5ddd,0x5ddd5ddd,0x5ddd5ddd,0x5ddd5ddd,0x5ddd5ddd,0x5ddd5ddd,0x5ddd5ddd,
0x5ddd5ddd,0x5ddd5ddd,0x66666666,0x66666666,0x66666666,0x66666666,0x66666666,0x66666666,
0x66666666,0x66666666,0x66666666,0x66666666,0x66666666,0x66666666,0x66666666,0x66666666,
0x66666666,0x66666666,0x66666666,0x66666666,0x66666666,0x66666666,0x66666666,0x66666666,
0x66666666,0x66666666,0x66666666,0x5ddd6666,0x5ddd5ddd,0x5ddd5ddd,0x5ddd5ddd,0x5ddd5ddd,
0x5ddd5ddd,0x5ddd5ddd,0x5ddd5ddd,0x5ddd5ddd,0x5ddd5ddd,0x55555555,0x55555555,0x55555555,
0x55555555,0x55555555,0x55555555,0x55555555,0x4ccc4ccc,0x4ccc4ccc,0x4ccc4ccc,0x4ccc4ccc,
0x4ccc4ccc,0x44444444,0x44444444,0x44444444,0x44444444,0x3c864444,0x3bbb3bbb,0x3bbb3bbb,
0x3bbb3bbb,0x3bbb3bbb,0x33333333,0x33333333,0x33333333,0x33333333,0x2aaa2aaa,0x2aaa2aaa,
0x2aaa2aaa,0x2aaa2aaa,0x22222222,0x22222222,0x22222222,0x22222222,0x19992222,0x19991999,
0x19991999,0x19991999,0x11111111,0x11111111,0x11111111,0x08881111,0x08880888,0x08880888,
0x08880888,0x00000888,0x00000000,0x00000000,0x00000000,0xf7780000,0xf778f778,0xf778f778,
0xf778f778,0xeeeff778,0xeeefeeef,0xeeefeeef,0xeeefeeef,0xe667eeef,0xe667e667,0xe667e667,
0xe667e667,0xdddee667,0xdddeddde,0xdddeddde,0xdddeddde,0xdddeddde,0xd556d621,0xd556d556,
0xd556d556,0xd556d556,0xd556d556,0xcccdcccd,0xcccdcccd,0xcccdcccd,0xcccdcccd,0xcccdcccd,
0xc445c445,0xc445c445,0xc445c445,0xc445c445,0xc445c445,0xc445c445,0xbbbcbc87,0xbbbcbbbc,
0xbbbcbbbc,0xbbbcbbbc,0xbbbcbbbc,0xbbbcbbbc,0xb334bbbc,0xb334b334,0xb334b334,0xb334b334,
0xb334b334,0xb334b334,0xb334b334,0xb334b334,0xaaabaaab,0xaaabaaab,0xaaabaaab,0xaaabaaab,
0xaaabaaab,0xaaabaaab,0xaaabaaab,0xaaabaaab,0xaaabaaab,0xaaabaaab,0xaaabaaab,0xa223a223,
0xa223a223,0xa223a223,0xa223a223,0xa223a223,0xa223a223,0xa223a223,0xa223a223,0xa223a223,
0xa223a223,0xa223a223,0xa223a223,0xa223a223,0xa223a223,0xa223a223,0xa223a223,0xa223a223,
0xa223a223,0xa223a223,0xa223a223,0xa223a223,0xa223a223,0xa223a223,0xa223a223,0xa223a223,
0xa223a223,0xa223a223,0xa223a223,0xa223a223,0xa223a223,0xa223a223,0xa223a223,0xa223a223,
0xa223a223,0xa223a223,0xa223a223,0xa223a223,0xa223a223,0xa223a223,0xa223a223,0xaaaba223,
0xaaabaaab,0xaaabaaab,0xaaabaaab,0xaaabaaab,0xaaabaaab,0xaaabaaab,0xaaabaaab,0xaaabaaab,
0xaaabaaab,0xaaabaaab,0xb334aaab,0xb334b334,0xb334b334,0xb334b334,0xb334b334,0xb334b334,
0xb334b334,0xb334b334,0xbbbcb334,0xbbbcbbbc,0xbbbcbbbc,0xbbbcbbbc,0xbbbcbbbc,0xbbbcbbbc,
0xbbbcbbbc,0xc37abbbc,0xc445c445,0xc445c445,0xc445c445,0xc445c445,0xc445c445,0xc445c445,
0xcccdcccd,0xcccdcccd,0xcccdcccd,0xcccdcccd,0xcccdcccd,0xcccdcccd,0xd556d556,0xd556d556,
0xd556d556,0xd556d556,0xd556d556,0xdddeddde,0xdddeddde,0xdddeddde,0xdddeddde,0xdddeddde,
0xe667e667,0xe667e667,0xe667e667,0xe667e667,0xeeefeeef,0xeeefeeef,0xeeefeeef,0xeeefeeef,
0xf778f778,0xf778f778,0xf778f778,0xf778f778,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,0x00000000,
0x00000000,0x00000000,
};

static const AudioSynthWavetable::sample_data AKWF_0076_samples[1] = {
	{
		(int16_t*)sample_0_AKWF_0076_AKWF_0076, // sample
		true, // LOOP
		10, // LENGTH_BITS
		(1 << (32 - 10)) * WAVETABLE_CENTS_SHIFT(0) * 44100.0 / WAVETABLE_NOTE_TO_FREQUENCY(60) / AUDIO_SAMPLE_RATE_EXACT + 0.5, // PER_HERTZ_PHASE_INCREMENT
		((uint32_t)601 - 1) << (32 - 10), // MAX_PHASE
		((uint32_t)600 - 1) << (32 - 10), // LOOP_PHASE_END
		(((uint32_t)600 - 1) << (32 - 10)), // LOOP_PHASE_LENGTH
		uint16_t(UINT16_MAX * WAVETABLE_DECIBEL_SHIFT(0)), // INITIAL_ATTENUATION_SCALAR
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DELAY_COUNT
		uint32_t(1.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // ATTACK_COUNT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // HOLD_COUNT
		uint32_t(1.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // DECAY_COUNT
		uint32_t(2399.11 * AudioSynthWavetable::SAMPLES_PER_MSEC / AudioSynthWavetable::ENVELOPE_PERIOD + 0.5), // RELEASE_COUNT
		int32_t((1.0 - WAVETABLE_DECIBEL_SHIFT(0.0)) * AudioSynthWavetable::UNITY_GAIN), // SUSTAIN_MULT
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // VIBRATO_DELAY
		uint32_t(8.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // VIBRATO_INCREMENT
		(WAVETABLE_CENTS_SHIFT(0) - 1.0) * 4, // VIBRATO_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(0)) * 4, // VIBRATO_COEFFICIENT_SECONDARY
		uint32_t(0.00 * AudioSynthWavetable::SAMPLES_PER_MSEC / (2 * AudioSynthWavetable::LFO_PERIOD)), // MODULATION_DELAY
		uint32_t(8.2 * AudioSynthWavetable::LFO_PERIOD * (UINT32_MAX / AUDIO_SAMPLE_RATE_EXACT)), // MODULATION_INCREMENT
		(WAVETABLE_CENTS_SHIFT(0) - 1.0) * 4, // MODULATION_PITCH_COEFFICIENT_INITIAL
		(1.0 - WAVETABLE_CENTS_SHIFT(0)) * 4, // MODULATION_PITCH_COEFFICIENT_SECOND
		int32_t(UINT16_MAX * (WAVETABLE_DECIBEL_SHIFT(0) - 1.0)) * 4, // MODULATION_AMPLITUDE_INITIAL_GAIN
		int32_t(UINT16_MAX * (1.0 - WAVETABLE_DECIBEL_SHIFT(0))) * 4, // MODULATION_AMPLITUDE_FINAL_GAIN
	},
};

static const uint8_t AKWF_0076_ranges[] = {127, };

const AudioSynthWavetable::instrument_data AKWF_0076 = {1, AKWF_0076_ranges, AKWF_0076_samples };
